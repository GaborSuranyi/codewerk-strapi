{
  "service": {
    "service": "strapi-4-serverless-guide",
    "serviceObject": {
      "name": "strapi-4-serverless-guide"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs16.x",
      "region": "eu-central-1",
      "profile": "strapi-serverless-admin",
      "logRetentionInDays": 1,
      "versionFunctions": false,
      "memorySize": 2048,
      "timeout": 30,
      "environment": {
        "APP_KEYS": "AWqxp0ToeAVClm+VB9onXQ==,RXa4e5y/JBTKVgp8jC6QCw==,NmyDyPPiSuO7eXeHYW0+yA==,2MxizfoPvTlZK+EVCKhAmA==",
        "API_TOKEN_SALT": "Ypf8bUeTUIkEU8FLJyB/zw==",
        "ADMIN_JWT_SECRET": "CXJD8Sl/1q+LbX2Ifqcn+g==",
        "JWT_SECRET": "DbNtD2B48jWdF0/HcSt5NA==",
        "SERVER_URL": "https://localhost:3000/dev",
        "DATABASE_PASSWORD": "_5O]E?,D~Zm7VF\\",
        "DATABASE_USERNAME": "strapi_codewerk",
        "DATABASE_NAME": "strapi4",
        "DATABASE_HOST": "strapi-codewerk-serverless-postgres.cidfbgwyelte.eu-west-1.rds.amazonaws.com"
      },
      "stage": "dev",
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "ApiLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/strapi-4-serverless-guide-dev-api",
              "RetentionInDays": 1
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "strapi-4-serverless-guide",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/strapi-4-serverless-guide-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/strapi-4-serverless-guide-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "strapi-4-serverless-guide",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "ApiLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/strapi-4-serverless-guide/dev/1669646614131-2022-11-28T14:43:34.131Z/strapi-4-serverless-guide.zip"
              },
              "Handler": "src/app.strapiHandler",
              "Runtime": "nodejs16.x",
              "FunctionName": "strapi-4-serverless-guide-dev-api",
              "MemorySize": 2048,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "APP_KEYS": "AWqxp0ToeAVClm+VB9onXQ==,RXa4e5y/JBTKVgp8jC6QCw==,NmyDyPPiSuO7eXeHYW0+yA==,2MxizfoPvTlZK+EVCKhAmA==",
                  "API_TOKEN_SALT": "Ypf8bUeTUIkEU8FLJyB/zw==",
                  "ADMIN_JWT_SECRET": "CXJD8Sl/1q+LbX2Ifqcn+g==",
                  "JWT_SECRET": "DbNtD2B48jWdF0/HcSt5NA==",
                  "SERVER_URL": "https://localhost:3000/dev",
                  "DATABASE_PASSWORD": "_5O]E?,D~Zm7VF\\",
                  "DATABASE_USERNAME": "strapi_codewerk",
                  "DATABASE_NAME": "strapi4",
                  "DATABASE_HOST": "strapi-codewerk-serverless-postgres.cidfbgwyelte.eu-west-1.rds.amazonaws.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ApiLogGroup"
            ]
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-strapi-4-serverless-guide",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceAnyVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "{any+}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAnyVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAnyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAny": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "ANY",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ApiLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ApiLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAnyVarAny": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "ANY",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAnyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ApiLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ApiLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1669646497873": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodOptions",
              "ApiGatewayMethodAnyVarOptions",
              "ApiGatewayMethodAny",
              "ApiGatewayMethodAnyVarAny"
            ]
          },
          "ApiLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ApiLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-strapi-4-serverless-guide-dev-ServerlessDeploymentBucketName"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-strapi-4-serverless-guide-dev-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "plugins": [
      "serverless-offline",
      "serverless-plugin-common-excludes"
    ],
    "pluginsData": {},
    "functions": {
      "api": {
        "handler": "src/app.strapiHandler",
        "events": [
          {
            "http": {
              "path": "",
              "method": "any",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "ANY"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "{any+}",
              "method": "any",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "ANY"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "strapi-4-serverless-guide-dev-api",
        "package": {},
        "memory": 2048,
        "timeout": 30,
        "runtime": "nodejs16.x",
        "vpc": {}
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "strapi-4-serverless-guide",
      "frameworkVersion": "3",
      "useDotenv": true,
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "package": {
        "excludeDevDependencies": true,
        "exclude": [
          "**"
        ],
        "include": [
          "build/**",
          "config/**",
          "database/**",
          "node_modules/**",
          "public/**",
          "src/**",
          ".env.example",
          "package.json",
          "!node_modules/esbuild-linux-64/**",
          "!node_modules/@babel/**",
          "!node_modules/@types/**",
          "!node_modules/webpack/**",
          "!node_modules/@sentry/**"
        ],
        "artifactsS3KeyDirname": "serverless/strapi-4-serverless-guide/dev/code-artifacts",
        "patterns": [
          "!.gitignore",
          "!.gitconfig",
          "!.editorconfig",
          "!.eslintignore",
          "!.eslintrc",
          "!.npmrc",
          "!.nycrc",
          "!.npmignore",
          "!*coveralls.yml",
          "!.circleci/**",
          "!*circle.yml",
          "!*travis.yml",
          "!.gitlab-ci.yml",
          "!*.md",
          "!*.apib",
          "!.vscode/**",
          "!package-lock.json",
          "!.npm-upgrade.json",
          "!sonar-project.properties",
          "!sonar-coverage.info",
          "!rollup.config.*",
          "!yarn.lock",
          "!coverage/**",
          "!.nyc_output/**",
          "!docs/**",
          "!test/**",
          "!tests/**",
          "!CODEOWNERS",
          "!node_modules/**/*.md",
          "!node_modules/**/*.flow",
          "!node_modules/**/*.patch",
          "!node_modules/**/*.conf",
          "!node_modules/**/*.markdown",
          "!node_modules/**/*.coffee",
          "!node_modules/**/jsdoc_conf.json",
          "!node_modules/**/*Makefile",
          "!node_modules/**/Dockerfile",
          "!node_modules/**/*.txt",
          "!node_modules/**/*.yml",
          "!node_modules/**/*.xml",
          "!node_modules/**/*.html",
          "!node_modules/**/test/**",
          "!node_modules/**/tests/**",
          "!node_modules/**/examples/**",
          "!node_modules/**/coverage/**",
          "!node_modules/**/.nyc_output/**",
          "!node_modules/**/bin/**",
          "!node_modules/**/bower.json",
          "!node_modules/**/karma.conf.js",
          "!node_modules/**/Gruntfile.js",
          "!node_modules/**/rollup.config.*",
          "!node_modules/**/yarn.lock",
          "!node_modules/**/sonar-project.properties",
          "!node_modules/**/package-lock.json",
          "!node_modules/**/*.d.ts",
          "!node_modules/**/*.map",
          "!node_modules/**/tsconfig.json",
          "!node_modules/**/AUTHORS",
          "!node_modules/**/CODEOWNERS",
          "!node_modules/**/OWNERS",
          "!node_modules/**/*.iml",
          "!node_module/**/*.bash_completion.in",
          "!node_modules/**/*.gif",
          "!node_modules/**/*.png",
          "!node_modules/**/*.jpg",
          "!node_modules/**/*.jpeg",
          "!node_modules/**/winston/scratch/**",
          "!node_modules/**/sshpk/man/**",
          "!node_modules/**/bluebird/js/browser/**",
          "!node_modules/**/date-fns/docs.json",
          "!node_modules/**/aws-xray-sdk-core/doc-src/**",
          "!node_modules/**/aws-sdk/dist/**",
          "!node_modules/**/aws-sdk/dist-tools/**"
        ],
        "artifact": "G:\\Projects\\codewerk-strapi\\.serverless\\strapi-4-serverless-guide.zip",
        "artifactDirectoryName": "serverless/strapi-4-serverless-guide/dev/1669646614131-2022-11-28T14:43:34.131Z"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "G:\\Projects\\codewerk-strapi\\.serverless\\strapi-4-serverless-guide.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/strapi-4-serverless-guide/dev/1669646614131-2022-11-28T14:43:34.131Z",
    "artifact": "strapi-4-serverless-guide.zip"
  }
}